# Generated by Django 4.2.2 on 2023-07-01 05:48

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Algorithm",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=255)),
                ("description", models.TextField(blank=True)),
                ("version", models.CharField(blank=True, max_length=255)),
                ("url", models.URLField(blank=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="BlogPost",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("title", models.CharField(max_length=80)),
                ("body", models.TextField()),
            ],
            options={
                "verbose_name": "Blog Post",
                "verbose_name_plural": "Blog Posts",
            },
        ),
        migrations.CreateModel(
            name="ClassificationResult",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Deployment",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=80)),
                ("description", models.TextField(blank=True)),
                ("data_source", models.TextField(blank=True, default="s3://bucket-name/prefix", max_length=255)),
                ("latitude", models.FloatField(blank=True, null=True)),
                ("longitude", models.FloatField(blank=True, null=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Device",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=80)),
                ("description", models.TextField(blank=True)),
            ],
            options={
                "verbose_name": "Device Configuration",
            },
        ),
        migrations.CreateModel(
            name="Event",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("start", models.DateTimeField()),
                ("end", models.DateTimeField(blank=True, null=True)),
                (
                    "deployment",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="events",
                        to="main.deployment",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Project",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=80)),
                ("description", models.TextField()),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Site",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=80)),
                ("description", models.TextField(blank=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="StorageSource",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="TaxaList",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=255)),
                ("description", models.TextField(blank=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Taxon",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=255)),
                (
                    "rank",
                    models.CharField(
                        choices=[("SPECIES", "SPECIES"), ("GENUS", "GENUS"), ("FAMILY", "FAMILY"), ("ORDER", "ORDER")],
                        max_length=255,
                    ),
                ),
                (
                    "parent",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="direct_children",
                        to="main.taxon",
                    ),
                ),
                ("parents", models.ManyToManyField(related_name="children", to="main.taxon")),
            ],
            options={
                "verbose_name_plural": "Taxa",
                "ordering": ["parent__name", "name"],
            },
        ),
        migrations.CreateModel(
            name="TaxaListEntry",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("ordering", models.IntegerField()),
                ("list", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="main.taxalist")),
                ("taxon", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="main.taxon")),
            ],
            options={
                "ordering": ["ordering"],
            },
        ),
        migrations.AddField(
            model_name="taxalist",
            name="taxa",
            field=models.ManyToManyField(related_name="lists", through="main.TaxaListEntry", to="main.taxon"),
        ),
        migrations.CreateModel(
            name="SourceImage",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("path", models.CharField(blank=True, max_length=255)),
                ("timestamp", models.DateTimeField(blank=True, null=True)),
                ("width", models.IntegerField(blank=True, null=True)),
                ("height", models.IntegerField(blank=True, null=True)),
                ("size", models.IntegerField(blank=True, null=True)),
                ("md5hash", models.CharField(blank=True, max_length=32)),
                (
                    "deployment",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="captures",
                        to="main.deployment",
                    ),
                ),
                (
                    "event",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="captures",
                        to="main.event",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Occurrence",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "deployment",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="occurrences",
                        to="main.deployment",
                    ),
                ),
                (
                    "determination",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="occurrences",
                        to="main.taxon",
                    ),
                ),
                (
                    "event",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="occurrences",
                        to="main.event",
                    ),
                ),
                (
                    "project",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="occurrences",
                        to="main.project",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Detection",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("bbox", models.JSONField(blank=True, null=True)),
                ("timestamp", models.DateTimeField(blank=True, null=True)),
                ("path", models.CharField(blank=True, max_length=255)),
                ("frame_num", models.IntegerField(blank=True, null=True)),
                ("detection_time", models.DateTimeField(blank=True, null=True)),
                ("detection_score", models.FloatField(blank=True, null=True)),
                ("similarity_vector", models.JSONField(blank=True, null=True)),
                (
                    "detection_algorithm",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to="main.algorithm"
                    ),
                ),
                (
                    "occurrence",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="detections",
                        to="main.occurrence",
                    ),
                ),
                (
                    "source_image",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="detections", to="main.sourceimage"
                    ),
                ),
            ],
            options={
                "ordering": ["frame_num", "timestamp"],
            },
        ),
        migrations.AddField(
            model_name="deployment",
            name="device",
            field=models.ForeignKey(
                null=True, on_delete=django.db.models.deletion.SET_NULL, related_name="deployments", to="main.device"
            ),
        ),
        migrations.AddField(
            model_name="deployment",
            name="project",
            field=models.ForeignKey(
                null=True, on_delete=django.db.models.deletion.SET_NULL, related_name="deployments", to="main.project"
            ),
        ),
        migrations.AddField(
            model_name="deployment",
            name="research_site",
            field=models.ForeignKey(
                null=True, on_delete=django.db.models.deletion.SET_NULL, related_name="deployments", to="main.site"
            ),
        ),
        migrations.CreateModel(
            name="Classification",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("score", models.FloatField(null=True)),
                ("timestamp", models.DateTimeField()),
                ("softmax_output", models.JSONField(null=True)),
                ("raw_output", models.JSONField(null=True)),
                (
                    "type",
                    models.CharField(
                        choices=[("machine", "machine"), ("human", "human"), ("ground_truth", "ground_truth")],
                        max_length=255,
                    ),
                ),
                (
                    "algorithm",
                    models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to="main.algorithm"),
                ),
                (
                    "detection",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="classifications",
                        to="main.detection",
                    ),
                ),
                (
                    "determination",
                    models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to="main.taxon"),
                ),
            ],
        ),
        migrations.AddConstraint(
            model_name="classification",
            constraint=models.CheckConstraint(
                check=models.Q(("type__in", ("machine", "human", "ground_truth"))),
                name="main_classification_type_valid",
            ),
        ),
    ]
