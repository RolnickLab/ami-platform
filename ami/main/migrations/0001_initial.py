# Generated by Django 4.2.2 on 2023-09-20 18:47

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Algorithm",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=255)),
                ("description", models.TextField(blank=True)),
                ("version", models.CharField(blank=True, max_length=255)),
                ("url", models.URLField(blank=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="BlogPost",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("title", models.CharField(max_length=80)),
                ("body", models.TextField()),
            ],
            options={
                "verbose_name": "Blog Post",
                "verbose_name_plural": "Blog Posts",
            },
        ),
        migrations.CreateModel(
            name="ClassificationResult",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Deployment",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=80)),
                ("description", models.TextField(blank=True)),
                ("data_source_total_files", models.IntegerField(blank=True, null=True)),
                ("data_source_total_size", models.BigIntegerField(blank=True, null=True)),
                ("data_source_subdir", models.CharField(blank=True, max_length=255, null=True)),
                ("data_source_regex", models.CharField(blank=True, max_length=255, null=True)),
                ("data_source_last_checked", models.DateTimeField(blank=True, null=True)),
                ("latitude", models.FloatField(blank=True, null=True)),
                ("longitude", models.FloatField(blank=True, null=True)),
                ("image", models.ImageField(blank=True, null=True, upload_to="deployments")),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Device",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=80)),
                ("description", models.TextField(blank=True)),
            ],
            options={
                "verbose_name": "Device Configuration",
            },
        ),
        migrations.CreateModel(
            name="Event",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "group_by",
                    models.CharField(
                        db_index=True,
                        help_text="A unique identifier for this event, used to group images into events. This allows images to be prepended or appended to an existing event. The default value is the day the event started, in the format YYYY-MM-DD. However images could also be grouped by camera settings, image dimensions, hour of day, or a random sample.",
                        max_length=255,
                    ),
                ),
                (
                    "start",
                    models.DateTimeField(db_index=True, help_text="The timestamp of the first image in the event."),
                ),
                (
                    "end",
                    models.DateTimeField(
                        blank=True, help_text="The timestamp of the last image in the event.", null=True
                    ),
                ),
                (
                    "deployment",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="events",
                        to="main.deployment",
                    ),
                ),
            ],
            options={
                "ordering": ["start"],
            },
        ),
        migrations.CreateModel(
            name="Project",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=80)),
                ("description", models.TextField()),
                ("image", models.ImageField(blank=True, null=True, upload_to="projects")),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="S3StorageSource",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=255)),
                ("bucket", models.CharField(max_length=255)),
                ("prefix", models.CharField(blank=True, max_length=255)),
                ("access_key", models.TextField()),
                ("secret_key", models.TextField()),
                ("endpoint_url", models.CharField(blank=True, max_length=255, null=True)),
                ("public_base_url", models.CharField(blank=True, max_length=255)),
                ("total_size", models.BigIntegerField(blank=True, null=True)),
                ("total_files", models.BigIntegerField(blank=True, null=True)),
                ("last_checked", models.DateTimeField(blank=True, null=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Site",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=80)),
                ("description", models.TextField(blank=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="SourceImage",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("path", models.CharField(blank=True, max_length=255)),
                ("public_base_url", models.CharField(blank=True, max_length=255)),
                ("timestamp", models.DateTimeField(blank=True, db_index=True, null=True)),
                ("width", models.IntegerField(blank=True, null=True)),
                ("height", models.IntegerField(blank=True, null=True)),
                ("size", models.BigIntegerField(blank=True, null=True)),
                ("last_modified", models.DateTimeField(blank=True, null=True)),
                ("checksum", models.CharField(blank=True, max_length=255, null=True)),
                ("checksum_algorithm", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "deployment",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="captures",
                        to="main.deployment",
                    ),
                ),
                (
                    "event",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="captures",
                        to="main.event",
                    ),
                ),
                (
                    "project",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="captures",
                        to="main.project",
                    ),
                ),
            ],
            options={
                "ordering": ("deployment", "event", "timestamp"),
            },
        ),
        migrations.CreateModel(
            name="Taxon",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=255, unique=True)),
                (
                    "rank",
                    models.CharField(
                        choices=[("ORDER", "Order"), ("FAMILY", "Family"), ("GENUS", "Genus"), ("SPECIES", "Species")],
                        default="SPECIES",
                        max_length=255,
                    ),
                ),
                ("active", models.BooleanField(default=True)),
                ("gbif_taxon_key", models.BigIntegerField(blank=True, null=True, verbose_name="GBIF taxon key")),
                (
                    "authorship_date",
                    models.DateField(blank=True, help_text="The date the taxon was described.", null=True),
                ),
                ("ordering", models.IntegerField(blank=True, null=True)),
                (
                    "parent",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="direct_children",
                        to="main.taxon",
                    ),
                ),
                ("parents", models.ManyToManyField(blank=True, related_name="children", to="main.taxon")),
                ("projects", models.ManyToManyField(related_name="taxa", to="main.project")),
                (
                    "synonym_of",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="synonyms",
                        to="main.taxon",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Taxa",
                "ordering": ["ordering", "name"],
            },
        ),
        migrations.CreateModel(
            name="TaxaList",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=255)),
                ("description", models.TextField(blank=True)),
                ("projects", models.ManyToManyField(related_name="taxa_lists", to="main.project")),
                ("taxa", models.ManyToManyField(related_name="lists", to="main.taxon")),
            ],
            options={
                "verbose_name_plural": "Taxa Lists",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="SourceImageCollection",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=255)),
                ("description", models.TextField(blank=True)),
                (
                    "method",
                    models.CharField(
                        choices=[
                            ("random", "random"),
                            ("stratified_random", "stratified_random"),
                            ("interval", "interval"),
                            ("manual", "manual"),
                        ],
                        max_length=255,
                    ),
                ),
                (
                    "kwargs",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Arguments passed to the sampling function",
                        null=True,
                        verbose_name="Arguments",
                    ),
                ),
                ("images", models.ManyToManyField(blank=True, related_name="collections", to="main.sourceimage")),
                (
                    "project",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="sourceimage_collections",
                        to="main.project",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Page",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=255)),
                (
                    "slug",
                    models.CharField(help_text="Unique, URL safe name e.g. about-us", max_length=255, unique=True),
                ),
                (
                    "content",
                    models.TextField(
                        blank=True, help_text="Use Markdown syntax", null=True, verbose_name="Body content"
                    ),
                ),
                (
                    "link_class",
                    models.CharField(blank=True, help_text="CSS class for nav link", max_length=255, null=True),
                ),
                ("nav_level", models.IntegerField(default=0, help_text="0 = main nav, 1 = sub nav, etc.")),
                ("nav_order", models.IntegerField(default=0, help_text="Order of nav items within a level")),
                ("published", models.BooleanField(default=False)),
                (
                    "project",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="pages",
                        to="main.project",
                    ),
                ),
            ],
            options={
                "ordering": ["nav_level", "nav_order", "name"],
            },
        ),
        migrations.CreateModel(
            name="Occurrence",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "deployment",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="occurrences",
                        to="main.deployment",
                    ),
                ),
                (
                    "determination",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="occurrences",
                        to="main.taxon",
                    ),
                ),
                (
                    "event",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="occurrences",
                        to="main.event",
                    ),
                ),
                (
                    "project",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="occurrences",
                        to="main.project",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Job",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=255)),
                (
                    "config",
                    models.JSONField(
                        default={
                            "input": {"name": "Captures", "size": 100},
                            "stages": [
                                {
                                    "key": "object_detection",
                                    "name": "Object Detection",
                                    "params": [
                                        {"key": "model", "name": "Localization Model", "value": "yolov5s"},
                                        {"key": "batch_size", "name": "Batch size", "value": 8},
                                        {"key": "input_size", "name": "Images processed", "read_only": True},
                                        {"key": "output_size", "name": "Objects detected", "read_only": True},
                                    ],
                                },
                                {
                                    "key": "binary_classification",
                                    "name": "Objects of Interest Filter",
                                    "params": [
                                        {
                                            "key": "algorithm",
                                            "name": "Binary classification model",
                                            "value": "resnet18",
                                        },
                                        {"key": "batch_size", "name": "Batch size", "value": 8},
                                        {"key": "input_size", "name": "Objects processed", "read_only": True},
                                        {"key": "output_size", "name": "Objects of interest", "read_only": True},
                                    ],
                                },
                                {
                                    "key": "species_classification",
                                    "name": "Species Classification",
                                    "params": [
                                        {
                                            "key": "algorithm",
                                            "name": "Species classification model",
                                            "value": "resnet18",
                                        },
                                        {"key": "batch_size", "name": "Batch size", "value": 8},
                                        {"key": "threshold", "name": "Confidence threshold", "value": 0.5},
                                        {"key": "input_size", "name": "Species processed", "read_only": True},
                                        {"key": "output_size", "name": "Species classified", "read_only": True},
                                    ],
                                },
                                {
                                    "key": "tracking",
                                    "name": "Occurrence Tracking",
                                    "params": [
                                        {
                                            "key": "algorithm",
                                            "name": "Occurrence tracking algorithm",
                                            "value": "adityacombo",
                                        },
                                        {"key": "input_size", "name": "Detections processed", "read_only": True},
                                        {"key": "output_size", "name": "Occurrences identified", "read_only": True},
                                    ],
                                },
                            ],
                        },
                        null=True,
                    ),
                ),
                ("queue", models.CharField(default="default", max_length=255)),
                ("scheduled_at", models.DateTimeField(blank=True, null=True)),
                ("started_at", models.DateTimeField(blank=True, null=True)),
                ("finished_at", models.DateTimeField(blank=True, null=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PENDING", "PENDING"),
                            ("STARTED", "STARTED"),
                            ("SUCCESS", "SUCCESS"),
                            ("FAILURE", "FAILURE"),
                            ("RETRY", "RETRY"),
                            ("REVOKED", "REVOKED"),
                            ("RECEIVED", "RECEIVED"),
                        ],
                        default="PENDING",
                        max_length=255,
                    ),
                ),
                (
                    "progress",
                    models.JSONField(
                        default={
                            "stages": [
                                {
                                    "input_size": 0,
                                    "key": "object_detection",
                                    "output_size": 0,
                                    "progress": 0,
                                    "status": "PENDING",
                                    "status_label": "0% completed.",
                                    "time_elapsed": 0,
                                    "time_remaining": None,
                                },
                                {
                                    "input_size": 0,
                                    "key": "binary_classification",
                                    "output_size": 0,
                                    "progress": 0,
                                    "status": "PENDING",
                                    "status_label": "0% completed.",
                                    "time_elapsed": 0,
                                    "time_remaining": None,
                                },
                                {
                                    "input_size": 0,
                                    "key": "species_classification",
                                    "output_size": 0,
                                    "progress": 0,
                                    "status": "PENDING",
                                    "status_label": "0% completed.",
                                    "time_elapsed": 0,
                                    "time_remaining": None,
                                },
                                {
                                    "input_size": 0,
                                    "key": "tracking",
                                    "output_size": 0,
                                    "progress": 0,
                                    "status": "PENDING",
                                    "time_elapsed": 0,
                                    "time_remaining": None,
                                },
                            ],
                            "summary": {"progress": 0, "status": "PENDING", "status_label": "0% completed."},
                        },
                        null=True,
                    ),
                ),
                ("result", models.JSONField(blank=True, null=True)),
                (
                    "deployment",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="jobs",
                        to="main.deployment",
                    ),
                ),
                (
                    "project",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="jobs", to="main.project"
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Identification",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("primary", models.BooleanField(default=False)),
                ("priority", models.IntegerField(default=1)),
                (
                    "occurrence",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="identifications",
                        to="main.occurrence",
                    ),
                ),
                (
                    "taxon",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="identifications",
                        to="main.taxon",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="identifications",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at", "-priority"],
            },
        ),
        migrations.AddField(
            model_name="event",
            name="project",
            field=models.ForeignKey(
                null=True, on_delete=django.db.models.deletion.SET_NULL, related_name="events", to="main.project"
            ),
        ),
        migrations.CreateModel(
            name="Detection",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("bbox", models.JSONField(blank=True, null=True)),
                ("timestamp", models.DateTimeField(blank=True, null=True)),
                ("path", models.CharField(blank=True, max_length=255)),
                ("frame_num", models.IntegerField(blank=True, null=True)),
                ("detection_time", models.DateTimeField(blank=True, null=True)),
                ("detection_score", models.FloatField(blank=True, null=True)),
                ("similarity_vector", models.JSONField(blank=True, null=True)),
                (
                    "detection_algorithm",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to="main.algorithm"
                    ),
                ),
                (
                    "occurrence",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="detections",
                        to="main.occurrence",
                    ),
                ),
                (
                    "source_image",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="detections", to="main.sourceimage"
                    ),
                ),
            ],
            options={
                "ordering": ["frame_num", "timestamp"],
            },
        ),
        migrations.AddField(
            model_name="deployment",
            name="data_source",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="deployments",
                to="main.s3storagesource",
            ),
        ),
        migrations.AddField(
            model_name="deployment",
            name="device",
            field=models.ForeignKey(
                null=True, on_delete=django.db.models.deletion.SET_NULL, related_name="deployments", to="main.device"
            ),
        ),
        migrations.AddField(
            model_name="deployment",
            name="project",
            field=models.ForeignKey(
                null=True, on_delete=django.db.models.deletion.SET_NULL, related_name="deployments", to="main.project"
            ),
        ),
        migrations.AddField(
            model_name="deployment",
            name="research_site",
            field=models.ForeignKey(
                null=True, on_delete=django.db.models.deletion.SET_NULL, related_name="deployments", to="main.site"
            ),
        ),
        migrations.CreateModel(
            name="Classification",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("score", models.FloatField(null=True)),
                ("timestamp", models.DateTimeField()),
                ("softmax_output", models.JSONField(null=True)),
                ("raw_output", models.JSONField(null=True)),
                (
                    "algorithm",
                    models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to="main.algorithm"),
                ),
                (
                    "detection",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="classifications",
                        to="main.detection",
                    ),
                ),
                (
                    "taxon",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="classifications",
                        to="main.taxon",
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at", "-score"],
            },
        ),
        migrations.AddIndex(
            model_name="sourceimage",
            index=models.Index(fields=["deployment", "timestamp"], name="main_source_deploym_2887d6_idx"),
        ),
        migrations.AddIndex(
            model_name="sourceimage",
            index=models.Index(fields=["event", "timestamp"], name="main_source_event_i_ab7d5d_idx"),
        ),
        migrations.AddIndex(
            model_name="sourceimage",
            index=models.Index(fields=["timestamp"], name="main_source_timesta_979028_idx"),
        ),
        migrations.AddConstraint(
            model_name="sourceimage",
            constraint=models.UniqueConstraint(fields=("deployment", "path"), name="unique_deployment_path"),
        ),
        migrations.AddConstraint(
            model_name="identification",
            constraint=models.UniqueConstraint(fields=("occurrence", "primary"), name="unique_primary_identification"),
        ),
        migrations.AddIndex(
            model_name="event",
            index=models.Index(fields=["group_by"], name="main_event_group_b_6ce666_idx"),
        ),
        migrations.AddIndex(
            model_name="event",
            index=models.Index(fields=["start"], name="main_event_start_ad5015_idx"),
        ),
        migrations.AddConstraint(
            model_name="event",
            constraint=models.UniqueConstraint(fields=("deployment", "group_by"), name="unique_event"),
        ),
    ]
